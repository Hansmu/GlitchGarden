To consider different aspect ratios you could stretch, add black bars or croppign edges. We'll go with cropping, quiet zones are areas that could be cut without losing the meaning.
Screen match mode: Matching on height or width puts in bars on changing ratios. With shrink it crops the edges for the ratio. Select it from the Canvas.
Use expand when you don't have quiet zones.

When building for mobile, .mp3 musics are better than .oggs, because ogg doesn't work on iOS.

Create prefabs when you have repeatable elements. For example buttons.

To fade in a screen add a UI -> Panel.

Playerprefs. They are persistent storage on the machine. This is unencrypted storage. A hacker could unlock it. It's slow to access, slow to access it on a frame by frame basis.
Limitations of playerprefs: slow to read and write, max file size 1MB, only supports Float, Int, String.
Write a wrapper for it to know for certain what keys we have, add error handling etc. Makes it safer.

Animation
Sprite sheets are frames of an animation.Bone based animation is having bits of the body apart and then moving those arounda  pivot point. Working out the grids for
Unity's slice. Grid width = image width / columns. Grid height = image height / rows.

Making a 2D animation
Create an empty GameObject
Drag one of the sprites as a placeholder
Add an Animator
Go into Animation window
Create new clip

Screen math ratio
Example 4:3
That means you have 4 units of measurement in one way and 3 the other.
If you want a screen to get smaller with the same ratio, for example 11, then you'd multiply with the smaller fraction ex. 11 * 3/4.
If you want a screen to get bigger with the same ratio, for example 11, then you'd multiply with the bigger fraction ex. 11 * 4/3.
If you'd have a screen with the height of 4cm, then to get the width on a 16:9 screen, you'd do 4cm * 16 / 9 = 64 / 9 = 7 cm
https://en.wikipedia.org/wiki/UV_mapping
For our game the game design document dictates that we have the space 9 tiles/columns wide in 4:3 aspect. 
Since we want to scale it to a higher resolution then to get the tiles for it we need to do 9 * 4/3 = 12 tiles wide in 16:9.
There are 2 grass squares per tile (full in the middle, half on either side) so with our grass we'd divide it with 2. Therefore the width is 12/2 = 6.
Considering the aspect ratio we'd get the height as 6 / 16 * 9 = 3.375 (single unit is 6/16 = 0.375 and the height is 9 units 0.375 * 9 = 3.375)

We add a panel to see where our core game focuses. Set it to track our smallest ratio 4:3. Since we're at 1600 pixels x 900 pixels wide with 16:9, to scale it down
we need to do 1600 * 3/4 = 1200 pixels wide. For some reason we get the height for 16:9??? that comes to 675.

Now translate and scale the level canvas.
1 grass square = 1m = 1 world unit
Width is 1600 pixels and 12 world units wide.
Pixels per world unit = 1600 / 12 = 133.3(3)
Scale level canvas 12 / 1600 = 0.0075

A game object can have a single animator. An animator can have one or more animation states. Animation state has an animation clip, transitions, parameters. 
Press on the transition line to specify transition based on a variable. Specify the variable under "Parameters". In the animation state you can select Motion to specify
your animation.

When you click on the sprite sheet, you can see Max Size in the Inspector. This can cause your sprites to be fuzzy if you downscale too much. Having it a 4096 gives the best clarity, however
it makes it bigger and older devices might not like it. Leaving Compressed in Format is generally the way. 
Can pack our sprite sheets more tightly to optimize. Can use TexturePacker and Shoebox for it. It's a lot of messing around with it.
MIP Mapping - a technique where an original high-resolution texture map is scaled and filtered into multiple resolutions within the texture file. Takes up 33% more space, but much faster.
Not needed if we're at a fixed distance. If you scroll out of your model, then it turns fuzzy and that's to do with MIP Mapping, it scales it down so it'd take up less space.
How to prevent a fuzzy sprite: check your sprite sheet size in pixels, look at the maximum X or Y dimension. Ensure your texture "Max Size" is larger or compact your sprite sheet.
You can leave compression on though.

Bone based animation
Having a sprite as different pieces and then putting in pivot points to the different pieces - bones and then pivoting them around the points.

Character animation
Create a character parent and a character child object. Parent has "Animator", Body has "Sprite Renderer". Create an "Animator controller" add it to the "Animator". Create a new
clip under Animator. Add a "Sprite" property to the Animation. Drag your sprite sheet sprites to the Animation. Delete the default sprites. Make sure th
Create a empty child object on the sprite. Call it "Body". We do this because we want to move the top level object in script, but the animation to occur on the body. We want the lizard to sit
in the middle of a square. We want independent control of the location of the body and everything else. Use the parent object to add the sprite into the square system and use
the body to do minor tweaks to the location.
Ensure there is an animator on the parent object.
Convert sprite sheet into seperate frames.
Add SpriteRenderer property to body object. Drag the sprite sheet objects into the Animation tab. With the lizard, we have 24 objects, we want set the samples to 24 as well so we could easily work out
appearing time.

If there are no actions, then the exit time is the number of seconds, otherwise it's the number of cycles.

Unity Remote App
Go to Edit -> Project Settings -> Editor. Device -> Any Android Device or iOS. Install Unity Remote on your phone. Connect phone with the computer using the USB. Need to run the game window
at the correct resolution to make it look correct on the device.
Might not always work, have to mess around with developer options then.

You can add function calls into the animator by choosing the time and then clicking on the pencil looking button with a plus. It calls functions from the scripts that are
attached to the object where the Animation Controller is attached to. Can't call a script that's on the child.
Once you've added the pointy pencil, double click on it and select the function you want to call.

Use a trigger when an action transition is a one off, use a bool when you have to stay there for a certain amount of time.

For projectiles also add subojects to hold their sprites.
Animator can reach into private methods.
When adding gameobjects to prefabs, add a prefab to a prefab, not an instance to an instance.

Creating icons for the bar.
We scaled the sprites down, say a gnome to 0.5834973. In order to have them fit into ordered squares in the icon area divide 1/0.5834973 and then you get the size of the Box Collider for the icon.
